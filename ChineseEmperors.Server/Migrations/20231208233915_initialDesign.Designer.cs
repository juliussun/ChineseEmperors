// <auto-generated />
using System;
using ChineseEmperors.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChineseEmperors.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231208233915_initialDesign")]
    partial class initialDesign
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChineseEmperors.Server.Entities.ChineseEmperor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("BirthYear")
                        .HasColumnType("integer");

                    b.Property<string>("CauseOfDeath")
                        .HasColumnType("text");

                    b.Property<int?>("DeathYear")
                        .HasColumnType("integer");

                    b.Property<string>("EraName")
                        .HasColumnType("text");

                    b.Property<int?>("FatherId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PosthumousName")
                        .HasColumnType("text");

                    b.Property<int?>("PredecessorId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReignEndYear")
                        .HasColumnType("integer");

                    b.Property<int?>("ReignStartYear")
                        .HasColumnType("integer");

                    b.Property<int?>("SuccessorId")
                        .HasColumnType("integer");

                    b.Property<string>("TempleName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FatherId");

                    b.HasIndex("SuccessorId")
                        .IsUnique();

                    b.ToTable("ChineseEmperors");
                });

            modelBuilder.Entity("ChineseEmperors.Server.Entities.ChineseEmperor", b =>
                {
                    b.HasOne("ChineseEmperors.Server.Entities.ChineseEmperor", "Father")
                        .WithMany("Sons")
                        .HasForeignKey("FatherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ChineseEmperors.Server.Entities.ChineseEmperor", "Successor")
                        .WithOne("Predecessor")
                        .HasForeignKey("ChineseEmperors.Server.Entities.ChineseEmperor", "SuccessorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Father");

                    b.Navigation("Successor");
                });

            modelBuilder.Entity("ChineseEmperors.Server.Entities.ChineseEmperor", b =>
                {
                    b.Navigation("Predecessor");

                    b.Navigation("Sons");
                });
#pragma warning restore 612, 618
        }
    }
}
